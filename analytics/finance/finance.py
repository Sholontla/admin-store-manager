import numpy as np
from sklearn.linear_model import LinearRegression


class Finance:

    # Step 1: Calculate total revenue generated each day
    def calculate_daily_revenue(self, sales_data):
        daily_revenue = {}
        for sale in sales_data:
            product_revenue = sale['price'] * sale['units_sold']
            if sale['date'] in daily_revenue:
                daily_revenue[sale['date']] += product_revenue
            else:
                daily_revenue[sale['date']] = product_revenue
        return daily_revenue

    # Step 2: Calculate average revenue per product
    def calculate_average_revenue(self, sales_data):
        total_revenue = sum([sale['price'] * sale['units_sold']
                            for sale in sales_data])
        total_units_sold = sum([sale['units_sold'] for sale in sales_data])
        return total_revenue / total_units_sold

    # Step 3: Identify top-selling products
    def identify_top_selling_products(self, sales_data):
        sorted_sales_data = sorted(
            sales_data, key=lambda x: x['units_sold'], reverse=True)
        return sorted_sales_data[:5]

    # Step 4: Calculate profit margin for each product
    def calculate_profit_margin(self, sale):
        revenue = sale['price'] * sale['units_sold']
        cost = sale['cost'] * sale['units_sold']
        profit_margin = (revenue - cost) / revenue
        return {'product': sale['product'], 'profit_margin': profit_margin}

    # Step 5: Calculate total cost of goods sold each day
    def calculate_daily_cost(self, sales_data):
        daily_cost = {}
        for sale in sales_data:
            product_cost = sale['cost'] * sale['units_sold']
            if sale['date'] in daily_cost:
                daily_cost[sale['date']] += product_cost
            else:
                daily_cost[sale['date']] = product_cost
        return daily_cost

    # Step 6: Calculate gross profit for each day
    def calculate_gross_profit(self, daily_revenue, daily_cost):
        gross_profit = {}
        for date, revenue in daily_revenue.items():
            gross_profit[date] = revenue - daily_cost[date]
        return gross_profit

    # Step 7: Calculate gross profit margin
    def calculate_gross_profit_margin(self, daily_revenue, daily_cost):
        gross_profit = self.calculate_gross_profit(daily_revenue, daily_cost)
        gross_profit_margin = {}
        for date, revenue in daily_revenue.items():
            gross_profit_margin[date] = gross_profit[date] / revenue
        return gross_profit_margin

    # Step 8: Analyze sales trends over time
    def analyze_sales_trends(self, daily_revenue):
        # TODO: Implement this function
        pass

    # Step 9: Calculate average daily revenue
    def calculate_average_daily_revenue(self, daily_revenue):
        average_daily_revenue = sum(
            daily_revenue.values()) / len(daily_revenue)
        return average_daily_revenue

    # Step 10: Determine total revenue generated by each store
    def calculate_store_revenue(self, sales_data):
        store_revenue = {}
        for sale in sales_data:
            if sale['date'] in store_revenue:
                store_revenue[sale['date']] += sale['price'] * \
                    sale['units_sold']
            else:
                store_revenue[sale['date']] = sale['price'] * \
                    sale['units_sold']
        return store_revenue

    # Step 11: Calculate the average profit margin for all products
    def calculate_average_profit_margin(self, sales_data):
        profit_margin = [self.calculate_profit_margin(
            sale)['profit_margin'] for sale in sales_data]
        return sum(profit_margin) / len(profit_margin)

    # Step 12: Identify worst-selling products
    def identify_worst_selling_products(self, sales_data):
        sorted_sales_data = sorted(sales_data, key=lambda x: x['units_sold'])
        return sorted_sales_data[:5]

    # Step 13: Calculate daily net profit
    def calculate_daily_net_profit(self, daily_revenue, daily_cost):
        daily_net_profit = {}
        for date, revenue in daily_revenue.items():
            daily_net_profit[date] = revenue - daily_cost[date]
        return daily_net_profit

    # Step 14: Identify store with highest revenue
    def identify_highest_revenue_store(self, sales_data):
        store_revenue = self.calculate_store_revenue(sales_data)
        return max(store_revenue, key=store_revenue.get)

    # Step 15: Calculate average daily net profit
    def calculate_average_cost_per_unit(self, sales_data):
        total_cost = sum([sale['cost'] * sale['units_sold']
                         for sale in sales_data])
        total_units_sold = sum([sale['units_sold'] for sale in sales_data])
        return total_cost / total_units_sold

    def calculate_daily_net_revenue(self, daily_revenue, daily_cost):
        daily_net_revenue = {}
        for date, revenue in daily_revenue.items():
            daily_net_revenue[date] = revenue - daily_cost[date]
        return daily_net_revenue

    def identify_worst_performing_stores(self, sales_data):
        store_daily_revenue = {}
        store_daily_cost = {}
        for sale in sales_data:
            store = sale['store']
            date = sale['date']
            product_revenue = sale['price'] * sale['units_sold']
            product_cost = sale['cost'] * sale['units_sold']
            if store in store_daily_revenue:
                store_daily_revenue[store][date] += product_revenue
                store_daily_cost[store][date] += product_cost
            else:
                store_daily_revenue[store] = {date: product_revenue}
                store_daily_cost[store] = {date: product_cost}

        store_daily_net_revenue = {}
        for store, daily_revenue in store_daily_revenue.items():
            store_daily_cost = store_daily_cost[store]
            store_daily_net_revenue[store] = self.calculate_daily_net_revenue(
                daily_revenue, store_daily_cost)

        worst_stores = sorted(store_daily_net_revenue.items(), key=lambda x: sum(
            x[1].values()))[:5]
        return worst_stores

    def calculate_daily_gross_revenue(self, sales_data):
        daily_revenue = {}
        for sale in sales_data:
            date = sale['date']
            product_revenue = sale['price'] * sale['units_sold']
            if date in daily_revenue:
                daily_revenue[date] += product_revenue
            else:
                daily_revenue[date] = product_revenue
        return daily_revenue

    def identify_top_performing_stores(self, sales_data):
        store_daily_revenue = {}
        for sale in sales_data:
            store = sale['store']
            date = sale['date']
            product_revenue = sale['price'] * sale['units_sold']
            if store in store_daily_revenue:
                if date in store_daily_revenue[store]:
                    store_daily_revenue[store][date] += product_revenue
                else:
                    store_daily_revenue[store][date] = product_revenue
            else:
                store_daily_revenue[store] = {date: product_revenue}

        store_daily_gross_revenue = {}
        for store, daily_revenue in store_daily_revenue.items():
            store_daily_gross_revenue[store] = sum(daily_revenue.values())

        top_stores = sorted(store_daily_gross_revenue.items(),
                            key=lambda x: x[1], reverse=True)[:5]
        return top_stores

    def analyze_price(prices, units_sold):
        # convert the input arrays into numpy arrays
        X = np.array(prices).reshape((-1, 1))
        y = np.array(units_sold)
        # create a linear regression object
        model = LinearRegression()

        # fit the model to the data
        model.fit(X, y)

        # print the coefficients
        print(f"Intercept: {model.intercept_}")
        print(f"Slope: {model.coef_[0]}")

        # calculate the R-squared value
        r_sq = model.score(X, y)
        print(f"R-squared: {r_sq}")

        # make a prediction for a new price
        new_price = 10
        predicted_units_sold = model.predict([[new_price]])
        print(
            f"Predicted units sold for a price of {new_price}: {predicted_units_sold[0]}")
